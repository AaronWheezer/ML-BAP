// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using Microsoft.ML.Data;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using MongoDB.Driver;

// Configure app
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddPredictionEnginePool<ML_BAP.ModelInput, ML_BAP.ModelOutput>()
    .FromFile("ML.BAP.mlnet");

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddCors(); // Add CORS service
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});

builder.Services.AddSingleton<IMongoClient>(provider =>
{
    var connectionString = "mongodb://aaronvanmarcke:7njLFZi8tE42jOoD@ac-6tjbt14-shard-00-00.5mufwtx.mongodb.net:27017,ac-6tjbt14-shard-00-01.5mufwtx.mongodb.net:27017,ac-6tjbt14-shard-00-02.5mufwtx.mongodb.net:27017/?replicaSet=atlas-d4otym-shard-0&ssl=true&authSource=admin";
    return new MongoClient(connectionString);
});

var app = builder.Build();

app.UseCors(policy =>
{
    policy.AllowAnyOrigin();
    policy.AllowAnyMethod();
    policy.AllowAnyHeader();
});

app.UseSwagger();

app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
});

var mongoConnectionString = "mongodb://aaronvanmarcke:7njLFZi8tE42jOoD@ac-6tjbt14-shard-00-00.5mufwtx.mongodb.net:27017,ac-6tjbt14-shard-00-01.5mufwtx.mongodb.net:27017,ac-6tjbt14-shard-00-02.5mufwtx.mongodb.net:27017/?replicaSet=atlas-d4otym-shard-0&ssl=true&authSource=admin";
var mongoClient = new MongoClient(mongoConnectionString);



// Define prediction route & handler
app.MapPost("/predict", async (PredictionEnginePool<ML_BAP.ModelInput, ML_BAP.ModelOutput> predictionEnginePool, ML_BAP.ModelInput input) =>
{
    // Make prediction
    var prediction = predictionEnginePool.Predict(input);

    // Save prediction to MongoDB
    var database = mongoClient.GetDatabase("WMS");
    var collection = database.GetCollection<ML_BAP.ModelOutput>("WMS");
    await collection.InsertOneAsync(prediction); 

    return prediction;
});


app.MapGet("/getWarehouseData", async (HttpContext httpContext) =>
{
    var mongoClient = httpContext.RequestServices.GetRequiredService<IMongoClient>();
    var database = mongoClient.GetDatabase("WMS");
    var collection = database.GetCollection<ML_BAP.ModelOutput>("WMS");

    var warehouseData = await collection.Find(_ => true).ToListAsync();
    return warehouseData;
});



// Run app
app.Run();
